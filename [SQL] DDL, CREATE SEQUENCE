--A sequence is a database item that generates a sequence of integers. 
--create sequence without specify the parameter, therefore the default value 1 for START_NUM and INCREMENT_NUM is used
CREATE SEQUENCE s_test;

CREATE SEQUENCE s_test2
START WITH 10 INCREMENT BY 5
MINVALUE 10 MAXVALUE 20
CYCLE CASHE 2 ORDER;

CREATE SEQUENCE s_test3
START WITH 10 INCREMENT BY -1
MINVALUE 1 MAXVALUE 10
CYCLE CACHR 5;

--initialize the sequence
--before retrieving the current value, we have to initialize the sequence by retrieving the next value
SELECT s_test.NEXTVAL FROM DUAL; -- 1

--once the sequence is initialized above, we can get the current value
SELECT s_test.CURRVAL FROM DUAL; -- 1

--when retrieve the CURRVAL the NEXTVAL remains unchanged, the value for NEXTVAL only changes when you retrieve NEXTVAL to get the next value.
SELECT s_test.NEXTVAL, s_test.CURRVAL FROM DUAL; -- 2 , 2

--the cycling optionin s_test2
SELECT s_test2.NEXTVAL FROM DUAL; --10
SELECT s_test2.NEXTVAL FROM DUAL; --15
SELECT s_test2.NEXTVAL FROM DUAL; --20
SELECT s_test2.NEXTVAL FROM DUAL; --10

--populate a primary key using a sequence
CREATE TABLE order_status2
(
id INTEGER CONSTRAINT order_status2_pk PRIMARY KEY,
status VARCHAR2(10),
last_modified DATE DEFAULT SYSDATE
);

CREATE SEQUENCE s_order_status2 NOCACHR; 
--when using a sequence to populate a primary key column
--we should use NOCACHE to avoid gaps in the sequence of numbers however using NOCACHE reduces performance 
--if we are absolutely sure that gaps in the primary key values are not a problem for the application, then consider using CACHE.

INSERT INTO order_status2(id,status,last_modified)
VALUES(s_order_status2.NEXTVAL,'PLACED','01-JAN-2006');

INSERT INTO order_status2(id,status,last_modified)
VALUES(s_order_status2.NEXTVAL,'pending','01-JAN-2006');

--specifying a default column value using a seequence
CREATE SEQUENCE a_default_value_for_column;
CREATE TABLE test_with_sequence
(
id INTEGER CONSTRAINT test_with_sequence_pk PRIMARY KEY,
sequence_value INTEGER DEFAULT s_default_value_for_column.NEXTVAL
)

--the following INSERT statement add rows to the table
--If the sequence is dropped, then subsequent INSERT statements will generate an error
INSERT INTO test_with_sequence(id) VALUES(1);
INSERT INTO test_with_sequence(id) VALUES(2);
INSERT INTO test_with_sequence(id) VALUES(3);

--using identity column
CREATE TABLE test_with_identity
(
id INTEGER CONSTRAINT test_with_identity_pk PRIMARY KEY,
identity_value INTEGER GENERATE BY DEFAULT AS IDENTITY(START WITH 5 INCRMENT BY 2)
);

INSERT INTO test_with_identity (id) VALUES (1);
INSERT INTO test_with_identity (id) VALUES (2);
INSERT INTO test_with_identity (id) VALUES (4);

SELECT * FROM test_with_identity;
--1   5
--2   7
--4   9

--modify a sequence
--1. cannot change the start value of the sequence
--2. the min value cannot be more than the current value of the sequence
--3. the max value cannot be less than the current value of the sequence

ALTER SEQUENCE s_test 
INCREMENT BY 2;

SELECT s_test.CURRVAL FROM DUAL; --2

SELECT s_test.NEXTVAL FROM DUAL; --4

--dropping a sequence

DROP SEQUENCE s_test3;

