--ROLLUP function
--in addition to the regular aggregation results we expected from the GROUP BY clasue, the ROLLUP extension produces group subtotals 
fom right to left and a grand total
--The TRUNC (date) function returns date with the time portion of the day truncated to the unit specified by the format.
--if there are n columns listed in the ROLLUP, there will be n+1 level of subtotals
SELECT TRUNC(s.sales_date,'mon') AS sales_month, p.product_name, SUM(sales_amount) AS sales_amount
FROM sales s, product p
WHERE s.product_id = p.product_id
GROUP BY ROLLUP(TRUNC(s.sales_date,'mon'), p.product_name)
ORDER BY TRUNC(s.sales_date,'mon'), p.product_name;



--CUBE function
--in addition to the subtotals generated by the ROLLUP extension, the CUBE extension will generate subtotals for all combinations of the
dimensions specified.
--for example, if there are n columns in the GROUP BY clause then using the CUBE function there will be 2**n subtotal level combinations
--the result below will provide the subtotal of each month, product category and the grand total of the month
SELECT TRUNC(s.sales_date,'mon') AS sales_month, p.product_name, SUM(sales_amount) AS sales_amount
FROM sales s, product p
WHERE s.product_id = p.product_id
GROUP BY CUBE(TRUNC(s.sales_date,'mon'), p.product_name)
ORDER BY TRUNC(s.sales_date,'mon'), p.product_name;

--GROUPING function (for programmatically purpose, help to identify the subtotal rows for each dimention)
--it accepts a single column as a parameter and returns 1 if the column contains a null value generated as part of
subtotal by a ROLLUP or CUBE operation or 0 for any other value, including stored null values
--the function output columns is similar to the dummy variable concept

SELECT TRUNC(s.sales_date,'mon') AS sales_month, p.product_name, 
GROUPING(TRUNC(s.sales_date,'mon')) AS FLAG1,
GROUPING(p.product_name) AS FLAG2,
SUM(sales_amount) AS sales_amount
FROM sales s, product p
WHERE s.product_id = p.product_id
GROUP BY CUBE(TRUNC(s.sales_date,'mon'), p.product_name)
ORDER BY TRUNC(s.sales_date,'mon'), p.product_name;

--GROUPING_ID function
--the function provides an alternate way to identify subtotal rows, the output column returns a number indicating the GROUP BY level
--the function output is similar to the concept of encoding categorical variable

SELECT TRUNC(s.sales_date,'mon') AS sales_month, p.product_name, 
GROUPING(TRUNC(s.sales_date,'mon'),p.product_name) AS FLAG_ID,
SUM(sales_amount) AS sales_amount
FROM sales s, product p
WHERE s.product_id = p.product_id
GROUP BY CUBE(TRUNC(s.sales_date,'mon'), p.product_name)
ORDER BY TRUNC(s.sales_date,'mon'), p.product_name;

--GROUPING SET function
--calculating all posible subtotals in a cube,especially those with many dimensions, can be quite an intensive
process. If we don't need all level of subtotals, we can specify the level of subtotal we want by using the GROUPING SET function

SELECT TRUNC(s.sales_date,'mon') AS sales_month, 
p.product_name, 
C.city,
SUM(sales_amount) AS sales_amount
FROM sales s, product p, customer c
WHERE s.product_id = p.product_id
AND s.customer_id = c.customer_id
GROUP BY GROUPING SETS
(
(TRUNC(s.sales_date,'mon'), p.product_name)
(TRUNC(s.sales_date,'mon'), c.city)
)
ORDER BY TRUNC(s.sales_date,'mon'), p.product_name,c.city;


