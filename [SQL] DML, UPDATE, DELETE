--<UPDATE>
--it is logical to make update based on the PK for the table
--making update on other conditions may be dangerous
UPDATE employees
SET salary=24100
WHERE employee_id =100;
COMMIT;

--update more than one column in the same tine
UPDATE copy_emp
SET salary=24000, department_id=10
WHERE employee_id=100;
COMMIT;

--if there is no where condition then the update will be for all the tables
UPDATE copy_emp
SET phone_number='515.123.4567';

--set collumn to null value during update
UPDATE copy_emp
SET department_id = NULL
WHERE employee_id=100;
COMMIT;

--using subquery in update
UPDATE copy_emp
SET salary=(SELECT salary FROM copy_emp WHERE employee_id=200)
WHERE employee_id=100;
COMMIT;

--make the salary and department_id for employee 105 like the salary and department_id for employee 108
--<method 1>
UPDATE copy_emp
SET (salary,department_id) = (SELECT salary, department_id FROM employees WHERE employee_id =108
WHERE employee_id =105;

--<method 2>
UPDATE copy_emp
SET salary = (SELECT salary FROM employees WHERE employee_id =108),
SET department_id = (SELECT department_id FROM employees WHERE employee_id =108)
WHERE employee_id =105;


--<DELETE>
--deleting records
DELETE FROM dept_copy
WHERE department_id = 10;

--you can rollback the delete
ROLLBACK;

--the keyword FROM is optimal in DELETE
DELETE dept_copy
WHERE department_id=10;

--if there is no WHERE clause then all rows in the table will be delete
DELETE FROM depat_copy;

--delete based on subquery
DELETE FROM dept_copy
WHERE department_id IN (SELECT department_id FROM dept_copy WHERE department_name LIKE '%PUBLIC%');

--situation that delete clause doesn't work
-- when other table contains foreign key to the table you want to perform delete and the child record is found you cannot perform delete
-- solve this by: alter the foreign key constraint with delete cascade option 
-- this will delete child table rows related to master table rows when deleted


















